{"version":3,"sources":["firebase.js","Poem.js","PoemList.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Poem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","scrollToTop","scroll","handleSubmit","event","console","log","preventDefault","poem","state","poemTitle","push","poemAuthor","database","ref","setState","canSubmit","handleChange","changeEvent","defineProperty","target","name","value","handleClick","react_default","a","createElement","id","length","className","map","line","i","key","action","onSubmit","htmlFor","type","placeholder","onChange","required","onClick","Component","PoemList","showPoem","toggleClass","readHide","poemList","slice","reverse","poemClass","concat","App","getPoems","userInput","searchWord","trim","toLocaleLowerCase","test","userMessage","userPoem","badInput","exec","isLoading","axios","method","url","dataResponse","params","reqUrl","xmlToJSON","then","result","sourceText","data","status","containsWordLines","doesNotContainWordLines","generatedPoem","regex","forEach","includes","numberOfContainesLines","numberOfDoesNotContaineLines","Math","floor","random","document","getElementById","scrollIntoView","behavior","catch","error","message","newSubmit","dbPoems","_this2","on","response","val","newState","poemKey","src_Poem","src_PoemList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.47d7fcb6.chunk.js","sourcesContent":["// Import general firebase\nimport firebase from 'firebase';\n\n// Initialize Firebase\nvar config = {\n    apiKey: \"AIzaSyB2bD8kgHnvlqYpPK9QERgE-hDleHBT9tk\",\n    authDomain: \"one-word-246c8.firebaseapp.com\",\n    databaseURL: \"https://one-word-246c8.firebaseio.com\",\n    projectId: \"one-word-246c8\",\n    storageBucket: \"one-word-246c8.appspot.com\",\n    messagingSenderId: \"461388693078\"\n};\nfirebase.initializeApp(config);\n\nexport default firebase;\n","import React, { Component } from 'react';\nimport firebase from './firebase.js';\n\nimport { Link, animateScroll as scroll } from \"react-scroll\";\n\nclass Poem extends Component {\n    constructor(props){\n        super(props)\n        this.state  = {\n          poemTitle: \"\",\n          poemAuthor: \"\",\n          canSubmit: true\n        }\n    } // end of constructor{}\n\n    // scrollToBottom = () => {\n    //   scroll.scrollToBottom(); \n    // };\n\n    scrollToTop = () => {\n      scroll.scrollToTop();\n    }\n\n    // scrollToPoem = () => {\n    //   let element2 = document.getElementsByClassName(\"poemCollection\");\n    //   element2.scrollIntoView({behavior: 'smooth'});\n    // }\n\n    componentDidUpdate() {\n      \n      // const element = document.getElementById(\"created-poem\");\n      \n      // element.scrollIntoView({behavior: 'smooth'});\n    }\n\n    handleSubmit = (event) => {\n        console.log(event);\n        // prevent default onSubmit function\n        event.preventDefault();\n        // update poem title\n        this.props.poem[0] = this.state.poemTitle;\n        // add author\n        this.props.poem.push(\"Author: \" + this.state.poemAuthor);\n        // connect with firebase database\n        const oneWordDBRef = firebase.database().ref('poems');\n        // push user poem to database\n        oneWordDBRef.push(this.props.poem);\n        // set canSubmit to be flase to remove saved poem\n        this.setState({\n          canSubmit: false\n        });\n\n        // this.scrollToPoem();\n    }\n  \n    // function that runs onChange (whenever a change occurs in inputs)\n    handleChange = (changeEvent) => {\n      this.setState({\n        [changeEvent.target.name]: changeEvent.target.value\n      })\n    }\n\n    handleClick = () =>{\n      console.log(\"CLICKED\");\n      this.scrollToTop();\n    }\n\n    render(){\n        return (\n            <div id=\"created-poem\">            \n            {\n                (this.props.poem.length > 1 && this.state.canSubmit) ? \n                (\n            <div className=\"poemHolder\">\n              <ul>\n                {/* Take every line in userPoem and print to page */}\n                <h2>Created Poem</h2>\n                {\n                  this.props.poem.map((line, i) => {\n                    return (\n                      <li key={i}>\n                        {line}\n                      </li>\n                    )\n                  })\n                }\n              </ul>\n              <form action=\"submit\" onSubmit={this.handleSubmit}>\n                <label className=\"visuallyHidden\" htmlFor=\"\">Add Title to Poem</label>                    \n                <input \n                    id=\"poemTitle\"\n                    type=\"text\" \n                    placeholder=\"Poem title:\"\n                    onChange={this.handleChange}\n                    name=\"poemTitle\"\n                    value={this.state.poemTitle}\n                    required/>\n                <input \n                    id=\"poemAuthor\"\n                    type=\"text\" \n                    placeholder=\"Authors name:\"\n                    onChange={this.handleChange}\n                    name=\"poemAuthor\"\n                    value={this.state.poemAuthor}\n                    required/>\n                \n                <button type=\"submit\" value=\"save\">Save poem</button>\n              </form>\n              <button className=\"tryAgain\" onClick={this.handleClick}>Try again?</button>\n            </div>\n                ) : (\n                    <h2></h2>\n                )\n            }\n          </div>\n        )\n    }\n}\n\nexport default Poem;","import React, { Component } from 'react';\n\nclass PoemList extends Component {\n    constructor() {\n        super()\n        this.state = {\n            toggleClass: \"togglePoem\",\n            readHide: \"Read\"\n        } // end this.state\n      } // end of constructor()\n\n    showPoem = () => {\n        console.log(\"CLICKED!\");\n        if (this.state.toggleClass === \"togglePoem\") {\n            console.log(\"NOT YET\")\n            this.setState({\n                toggleClass: \"showPoems\",\n                readHide: \"Hide\"\n            });\n        } else {\n            console.log(\"NOW\")\n            this.setState({\n                toggleClass: \"togglePoem\",\n                readHide: \"Read\"\n            });\n            // this.setState();\n        }\n    }\n\n    render(){\n        return(\n            \n            <div className=\"poemCollection wrapper\">\n                <h1>Poem Catalog</h1>\n                {\n                // iterate through this.state.poems.dbPoems \n                this.props.poemList.slice(0).reverse().map((poem, i) =>{\n                    let poemClass = `poem poem${i}`\n                    return(\n                        // return unorderd list that will contain poem lines\n                        <ul key={poem[0]} className={poemClass}>\n                        {\n                        // iterate through each poem and return list of lines\n                        poem[1].map((line, i)=>{\n                        return(\n                            <li key={i}>\n                            {line} \n                            {/* <span className={this.state.toggleClass} onClick={this.showPoem}>{this.state.readHide}</span> */}\n                            </li>\n                        )\n                        })                          \n                        }                        \n                        </ul>\n                    )              \n                })\n               }\n            </div> // end poemCollection\n            \n        )\n    }\n}\n\nexport default PoemList;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Poem from './Poem.js'\nimport firebase from './firebase';\n\nimport './App.css';\nimport PoemList from './PoemList.js';\n\nimport { Link, animateScroll as scroll } from \"react-scroll\";\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      searchWord: '',\n      isLoading: false,\n      userPoem: [],\n      dbPoems: [],\n      userMessage: \"\",\n      badInput: false,\n      // newSubmit: true\n    } // end this.state\n  } // end of constructor()\n\n\n  // function to access poetry api & return object\n  getPoems = () => {\n\n    // remove potential leading/trailing white space\n    let userInput = this.state.searchWord.trim().toLocaleLowerCase();\n    let inputRegex = /[^A-Za-z0-9]/;\n\n    ///// INPUT CHECKKING /////\n    // check to see if word is at least 3 letters long\n    if (userInput.length > 2) {\n\n      // test to see if input contains whitespace (is two words)\n      // regex conditional solution found here - https://stackoverflow.com/questions/1731190/check-if-a-string-has-white-space\n      if (/\\s/g.test(userInput) === true ){\n        this.setState({\n          userMessage: \"Please enter only one word\",\n          userPoem: [],\n          badInput: true\n        });\n        return \"Please enter only one word\";\n\n      // test for special characters\n      } else if (inputRegex.exec(userInput) !== null){\n        this.setState({\n          userMessage: \"No special characters please\",\n          userPoem: [],\n          badInput: true\n        });\n        return \"No special characters please\";\n\n      // input is good - send API request\n      } else {\n\n        // set isLoading to be true to update DOM\n        this.setState({\n          isLoading: true,\n        });\n\n        axios({\n          method: 'GET',\n          url: 'https://proxy.hackeryou.com',\n          dataResponse: 'json',\n          params: {\n            reqUrl: `http://poetrydb.org/lines/${userInput}/lines.json`\n          },\n          xmlToJSON: false\n        }).then((result) => {\n            console.log(\"RESULT\", result);\n            // collect result object and store in a variable\n            let sourceText = result.data;\n    \n            if (sourceText.status === 404) {\n              this.setState({\n                isLoading: false,\n                searchWord: \"\",\n                badInput: true,\n                userMessage: \"Sorry no results try again?\"\n              });\n              return \"Sorry no results try again?\"\n            }\n\n            this.setState({\n              badInput: false\n            });\n    \n            // decalare local variables\n            let containsWordLines = []; \n            let doesNotContainWordLines = [];\n            let generatedPoem = [\"[Title]\"];\n            let line = 0;\n    \n            // delcare RegEx to check strings\n            let regex = /[!@#$%^&*()_?:{}|<>[]/;\n            \n            // iterate through 'sourceText' object\n            sourceText.forEach((poem)=>{\n              \n              // each poem is an array of lines\n              // iterate through each poem\n              poem['lines'].forEach((line)=>{\n    \n                if(line !== ''){               \n                // if line is not an empty string\n                    if (!regex.exec(line)){\n                    // if line does not contain special character\n                    if(line.includes(this.state.searchWord) === true){\n                      // if line contains searched word, push to containsWordLines[] array\n                      containsWordLines.push(line);\n                    } else {\n                      // if line does not contain searched word, push to doesNotContainWordLines[] array\n                      doesNotContainWordLines.push(line);\n                    }\n                  }\n                }\n    \n              });\n            });\n    \n            // declare lenths of arrays as varialbes\n            let numberOfContainesLines = containsWordLines.length;\n            let numberOfDoesNotContaineLines = doesNotContainWordLines.length;\n            \n            // create 10 line poem\n            for (let i = 0; i <10; i ++){\n              if (i === 0 || i === 9) {\n                // for 1st and last lines\n                // push randomly selected line with user input to to 'generatedPoem' array\n                line = Math.floor((Math.random() * numberOfContainesLines));\n                generatedPoem.push(containsWordLines[line].trim());\n              } else {\n                // push randomly selected line without user input to to 'generatedPoem' array\n                line = Math.floor((Math.random() * numberOfDoesNotContaineLines));\n                generatedPoem.push(doesNotContainWordLines[line].trim());\n              }\n            }\n    \n            // we have data to return, update isLoading to be false\n            // update userPoem, clear search word\n            this.setState({\n              isLoading: false,\n              userPoem: generatedPoem,\n              searchWord: ''\n            });\n            \n            // poem is created, scroll down to poem\n            let element = document.getElementById(\"created-poem\");\n            element.scrollIntoView({behavior: 'smooth'});\n\n          }).catch(error => {\n            // catch errors and handle them\n            console.log(error.message)\n          }) // end of then\n      } // end of nested else\n    } else {\n      console.log(\"Word must be at least three letters\");\n      this.setState({\n        userMessage: \"Word must be at least three letters\",\n        userPoem: [],\n        badInput: true\n      });\n    }\n  } // end getPoems\n\n  // scrollToBottom = () => {\n  //   scroll.scrollToBottom(); \n  // };\n\n  handleSubmit = (event) => {\n    // prevent default action on submit\n    event.preventDefault();\n    // call function to get poems - getPoems()\n    this.setState({\n      newSubmit: true\n    });\n    this.getPoems();\n  }\n\n  // function that runs onChange (whenever a change occurs)\n  handleChange = (changeEvent) => {\n    // console.log(changeEvent.target.value);\n    // update state's searchWord with value from changeEvent\n    \n    this.setState({\n      [changeEvent.target.name]: changeEvent.target.value\n    })\n\n\n  }\n\n  componentDidMount(){\n    // connect with 'poems' obj in firebase database\n    const oneWordDBRef = firebase.database().ref('poems');\n\n    oneWordDBRef.on('value', (response) => {\n      // create variable to hold data\n      let data = response.val();\n\n      // create array to hold returned objects\n      let newState = [];\n\n      for(let poemKey in data){\n        // store vaules in newState array\n        newState.push([\n          poemKey,\n          data[poemKey]\n        ]);\n      } \n\n      // setState of this.state.dbPoems to newState array\n      this.setState({\n        dbPoems: newState\n      })\n    });\n\n  }\n\n\n  render() {\n    return ( \n      <div className=\"App\">\n        <header className=\"wrapper\">\n          <h1>A Single Word</h1>\n          {/* <h2 className=\"subHead\">Create a poem mash-up based on one word</h2> */}\n          <h2 className=\"appInfo\">Enter a single word below. Using that word, we create a poem for you,\n             using lines from the back catalog of classic poets.</h2>\n          {/* <p>Each line in your poem appers in a poem that contains the word you entered.</p> */}\n\n          {\n          // check to see if api is 'loading'\n          this.state.isLoading ? \n          (\n            // if 'loading' return message\n            <div className=\"loadingScreen\">\n              <p className=\"patience\">“Patience, my friend, patience!”</p>\n              <p>\n                <div className=\"ripple lds-ripple\"><div></div><div></div></div>\n              </p>\n            </div>\n          ) : (      \n            // if NOT 'loading' return for to resubmit\n            // form to handle input from user\n            <form className=\"inputForm\" action=\"submit\" onSubmit={this.handleSubmit}>                         \n              {/* text input with name 'searchWord'\n                  value is this.state.searchWord */}\n              <label className=\"visuallyHidden\" htmlFor=\"userInput\">Enter word to generate poem</label>                    \n              <input \n                id=\"userInput\"\n                type=\"text\" \n                placeholder=\"enter one word\"\n                onChange={this.handleChange}\n                name=\"searchWord\"\n                value={this.state.searchWord}/>\n              <button type=\"submit\">\n                get poem\n              </button>\n              {\n                this.state.badInput ? (\n                  <p className=\"inputCheck\">{this.state.userMessage}</p>\n                ) : (\n                  <p></p>\n                )\n              }\n            </form>\n\n          )\n          }\n\n        </header>\n        <main className=\"wrapper\">\n\n          <Poem poem={this.state.userPoem}/>\n          <PoemList poemList={this.state.dbPoems}/>\n\n        </main>\n      <footer>\n        Cian O'Ruanaidh &copy; 2019\n      </footer>\n      </div> // end of App\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}